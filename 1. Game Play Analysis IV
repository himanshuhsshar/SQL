Game Play Analysis IV

SQL Schema
Pandas Schema
Table: Activity

+--------------+---------+
| Column Name  | Type    |
+--------------+---------+
| player_id    | int     |
| device_id    | int     |
| event_date   | date    |
| games_played | int     |
+--------------+---------+
(player_id, event_date) is the primary key (combination of columns with unique values) of this table.
This table shows the activity of players of some games.
Each row is a record of a player who logged in and played a number of games (possibly 0) before logging out on 
someday using some device.
 

Write a solution to report the fraction of players that logged in again on the day after the day they first 
logged in, rounded to 2 decimal places. In other words, you need to count the number of players that logged in for 
at least two consecutive days starting from their first login date, then divide that number by the total 
number of players.

The result format is in the following example.

 

Example 1:

Input: 
Activity table:
+-----------+-----------+------------+--------------+
| player_id | device_id | event_date | games_played |
+-----------+-----------+------------+--------------+
| 1         | 2         | 2016-03-01 | 5            |
| 1         | 2         | 2016-03-02 | 6            |
| 2         | 3         | 2017-06-25 | 1            |
| 3         | 1         | 2016-03-02 | 0            |
| 3         | 4         | 2018-07-03 | 5            |
+-----------+-----------+------------+--------------+
Output: 
+-----------+
| fraction  |
+-----------+
| 0.33      |
+-----------+
Explanation: 
Only the player with id 1 logged back in after the first day he had logged in so the answer is 1/3 = 0.33


Solution :

# Write your MySQL query statement below
SELECT 
    ROUND(COUNT(DISTINCT player_id) / (SELECT COUNT(DISTINCT player_id) FROM Activity), 2) 
    as fraction
from activity where (player_id, DATE_SUB(event_date, INTERVAL 1 DAY)) IN 
(select player_id, MIN(event_date) AS first_login from Activity group by player_id);



‚úÖ Problem Summary
From a table Activity(player_id, event_date), calculate the fraction of players who logged in on the 
day immediately after their first login (i.e., they returned the next day). Round the result to 2 decimal places.

üîç Full Query:


SELECT 
    ROUND(COUNT(DISTINCT player_id) / 
          (SELECT COUNT(DISTINCT player_id) FROM Activity), 2) AS fraction
FROM Activity 
WHERE (player_id, DATE_SUB(event_date, INTERVAL 1 DAY)) IN (
    SELECT player_id, MIN(event_date) AS first_login 
    FROM Activity 
    GROUP BY player_id
);


‚úÖ Step-by-step Explanation
üß© Step 1: Subquery ‚Äî First Login per Player

SELECT player_id, MIN(event_date) AS first_login 
FROM Activity 
GROUP BY player_id
This finds the earliest login date (MIN(event_date)) for each player_id. That is, each player's first login date.

üß© Step 2: Main Query WHERE Clause

WHERE (player_id, DATE_SUB(event_date, INTERVAL 1 DAY)) IN (...)
We are checking:
For each row in Activity, does the previous day of its event_date match that player‚Äôs first login?

This means:
Did the player log in the day after their first login?

If yes, we count them.

üß© Step 3: Numerator

COUNT(DISTINCT player_id)
Counts how many unique players returned on the next day.

üß© Step 4: Denominator

(SELECT COUNT(DISTINCT player_id) FROM Activity)
Total number of unique players in the table.

üß© Step 5: Final Output

ROUND(numerator / denominator, 2)
Calculates the fraction of players who returned the next day, rounded to 2 decimal places.

üìò Example
Let's use this data in the Activity table:

player_id	event_date
1	2024-04-01
1	2024-04-02
1	2024-04-04
2	2024-04-01
2	2024-04-03
3	2024-04-05
3	2024-04-06
4	2024-04-10

Step 1: First login per player
player_id	first_login
1	2024-04-01
2	2024-04-01
3	2024-04-05
4	2024-04-10

Step 2: Who logged in on first_login + 1 day?
Player 1 ‚Üí 2024-04-02 ‚úÖ

Player 2 ‚Üí 2024-04-03 ‚ùå (not first_login + 1 day)

Player 3 ‚Üí 2024-04-06 ‚úÖ

Player 4 ‚Üí No second login ‚ùå

‚úÖ Players who returned next day: Player 1 and Player 3

Step 3: Final Fraction
Numerator = 2 (players who returned)

Denominator = 4 (unique players)


ROUND(2 / 4, 2) = 0.50
‚úÖ Final Output:

fraction
--------
0.50
üìå Summary
Part	Meaning
Subquery	Finds first login date per player
DATE_SUB(..., 1 DAY)	Shifts current date back by 1 day
IN clause	Checks if login happened the day after first login
COUNT & ROUND	Calculates and formats the result
